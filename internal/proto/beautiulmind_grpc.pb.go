// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.31.1
// source: proto/beautiulmind.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BeautifulMindClient is the client API for BeautifulMind service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BeautifulMindClient interface {
	ListTheses(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListThesesResponse, error)
	StartSession(ctx context.Context, in *StartSessionRequest, opts ...grpc.CallOption) (*SessionState, error)
	ProcessInput(ctx context.Context, in *ProcessInputRequest, opts ...grpc.CallOption) (*SessionState, error)
	AddCard(ctx context.Context, in *AddCardRequest, opts ...grpc.CallOption) (*Card, error)
}

type beautifulMindClient struct {
	cc grpc.ClientConnInterface
}

func NewBeautifulMindClient(cc grpc.ClientConnInterface) BeautifulMindClient {
	return &beautifulMindClient{cc}
}

func (c *beautifulMindClient) ListTheses(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListThesesResponse, error) {
	out := new(ListThesesResponse)
	err := c.cc.Invoke(ctx, "/beautifulmind.BeautifulMind/ListTheses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beautifulMindClient) StartSession(ctx context.Context, in *StartSessionRequest, opts ...grpc.CallOption) (*SessionState, error) {
	out := new(SessionState)
	err := c.cc.Invoke(ctx, "/beautifulmind.BeautifulMind/StartSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beautifulMindClient) ProcessInput(ctx context.Context, in *ProcessInputRequest, opts ...grpc.CallOption) (*SessionState, error) {
	out := new(SessionState)
	err := c.cc.Invoke(ctx, "/beautifulmind.BeautifulMind/ProcessInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beautifulMindClient) AddCard(ctx context.Context, in *AddCardRequest, opts ...grpc.CallOption) (*Card, error) {
	out := new(Card)
	err := c.cc.Invoke(ctx, "/beautifulmind.BeautifulMind/AddCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BeautifulMindServer is the server API for BeautifulMind service.
// All implementations must embed UnimplementedBeautifulMindServer
// for forward compatibility
type BeautifulMindServer interface {
	ListTheses(context.Context, *Empty) (*ListThesesResponse, error)
	StartSession(context.Context, *StartSessionRequest) (*SessionState, error)
	ProcessInput(context.Context, *ProcessInputRequest) (*SessionState, error)
	AddCard(context.Context, *AddCardRequest) (*Card, error)
	mustEmbedUnimplementedBeautifulMindServer()
}

// UnimplementedBeautifulMindServer must be embedded to have forward compatible implementations.
type UnimplementedBeautifulMindServer struct {
}

func (UnimplementedBeautifulMindServer) ListTheses(context.Context, *Empty) (*ListThesesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTheses not implemented")
}
func (UnimplementedBeautifulMindServer) StartSession(context.Context, *StartSessionRequest) (*SessionState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSession not implemented")
}
func (UnimplementedBeautifulMindServer) ProcessInput(context.Context, *ProcessInputRequest) (*SessionState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessInput not implemented")
}
func (UnimplementedBeautifulMindServer) AddCard(context.Context, *AddCardRequest) (*Card, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCard not implemented")
}
func (UnimplementedBeautifulMindServer) mustEmbedUnimplementedBeautifulMindServer() {}

// UnsafeBeautifulMindServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BeautifulMindServer will
// result in compilation errors.
type UnsafeBeautifulMindServer interface {
	mustEmbedUnimplementedBeautifulMindServer()
}

func RegisterBeautifulMindServer(s grpc.ServiceRegistrar, srv BeautifulMindServer) {
	s.RegisterService(&BeautifulMind_ServiceDesc, srv)
}

func _BeautifulMind_ListTheses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeautifulMindServer).ListTheses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beautifulmind.BeautifulMind/ListTheses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeautifulMindServer).ListTheses(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeautifulMind_StartSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeautifulMindServer).StartSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beautifulmind.BeautifulMind/StartSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeautifulMindServer).StartSession(ctx, req.(*StartSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeautifulMind_ProcessInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeautifulMindServer).ProcessInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beautifulmind.BeautifulMind/ProcessInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeautifulMindServer).ProcessInput(ctx, req.(*ProcessInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeautifulMind_AddCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeautifulMindServer).AddCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beautifulmind.BeautifulMind/AddCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeautifulMindServer).AddCard(ctx, req.(*AddCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BeautifulMind_ServiceDesc is the grpc.ServiceDesc for BeautifulMind service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BeautifulMind_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "beautifulmind.BeautifulMind",
	HandlerType: (*BeautifulMindServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTheses",
			Handler:    _BeautifulMind_ListTheses_Handler,
		},
		{
			MethodName: "StartSession",
			Handler:    _BeautifulMind_StartSession_Handler,
		},
		{
			MethodName: "ProcessInput",
			Handler:    _BeautifulMind_ProcessInput_Handler,
		},
		{
			MethodName: "AddCard",
			Handler:    _BeautifulMind_AddCard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/beautiulmind.proto",
}
