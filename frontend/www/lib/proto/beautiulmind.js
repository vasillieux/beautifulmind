// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "beautiulmind.proto" (package "beautifulmind", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// @generated message type with reflection information, may provide speed optimized methods
class Empty$Type extends MessageType {
    constructor() {
        super("beautifulmind.Empty", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message beautifulmind.Empty
 */
export const Empty = new Empty$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Card$Type extends MessageType {
    constructor() {
        super("beautifulmind.Card", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "deck_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "concept_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = "";
        message.deckId = "";
        message.conceptId = "";
        message.title = "";
        message.content = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string deck_id */ 2:
                    message.deckId = reader.string();
                    break;
                case /* string concept_id */ 3:
                    message.conceptId = reader.string();
                    break;
                case /* string title */ 4:
                    message.title = reader.string();
                    break;
                case /* string content */ 5:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string deck_id = 2; */
        if (message.deckId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.deckId);
        /* string concept_id = 3; */
        if (message.conceptId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.conceptId);
        /* string title = 4; */
        if (message.title !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.title);
        /* string content = 5; */
        if (message.content !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message beautifulmind.Card
 */
export const Card = new Card$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Concept$Type extends MessageType {
    constructor() {
        super("beautifulmind.Concept", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = "";
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message beautifulmind.Concept
 */
export const Concept = new Concept$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JourneyStep$Type extends MessageType {
    constructor() {
        super("beautifulmind.JourneyStep", [
            { no: 1, name: "card", kind: "message", T: () => Card },
            { no: 2, name: "answered_correctly", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.answeredCorrectly = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* beautifulmind.Card card */ 1:
                    message.card = Card.internalBinaryRead(reader, reader.uint32(), options, message.card);
                    break;
                case /* bool answered_correctly */ 2:
                    message.answeredCorrectly = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* beautifulmind.Card card = 1; */
        if (message.card)
            Card.internalBinaryWrite(message.card, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool answered_correctly = 2; */
        if (message.answeredCorrectly !== false)
            writer.tag(2, WireType.Varint).bool(message.answeredCorrectly);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message beautifulmind.JourneyStep
 */
export const JourneyStep = new JourneyStep$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SessionState$Type extends MessageType {
    constructor() {
        super("beautifulmind.SessionState", [
            { no: 1, name: "thesis", kind: "message", T: () => Card },
            { no: 2, name: "evidence_deck", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Card },
            { no: 3, name: "current_step", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "journey_log", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => JourneyStep },
            { no: 5, name: "is_evidence_revealed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "current_card", kind: "message", T: () => Card },
            { no: 7, name: "concepts", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Concept } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.evidenceDeck = [];
        message.currentStep = 0;
        message.journeyLog = [];
        message.isEvidenceRevealed = false;
        message.concepts = {};
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* beautifulmind.Card thesis */ 1:
                    message.thesis = Card.internalBinaryRead(reader, reader.uint32(), options, message.thesis);
                    break;
                case /* repeated beautifulmind.Card evidence_deck */ 2:
                    message.evidenceDeck.push(Card.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 current_step */ 3:
                    message.currentStep = reader.int32();
                    break;
                case /* repeated beautifulmind.JourneyStep journey_log */ 4:
                    message.journeyLog.push(JourneyStep.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool is_evidence_revealed */ 5:
                    message.isEvidenceRevealed = reader.bool();
                    break;
                case /* beautifulmind.Card current_card */ 6:
                    message.currentCard = Card.internalBinaryRead(reader, reader.uint32(), options, message.currentCard);
                    break;
                case /* map<string, beautifulmind.Concept> concepts */ 7:
                    this.binaryReadMap7(message.concepts, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap7(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Concept.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for beautifulmind.SessionState.concepts");
            }
        }
        map[key ?? ""] = val ?? Concept.create();
    }
    internalBinaryWrite(message, writer, options) {
        /* beautifulmind.Card thesis = 1; */
        if (message.thesis)
            Card.internalBinaryWrite(message.thesis, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated beautifulmind.Card evidence_deck = 2; */
        for (let i = 0; i < message.evidenceDeck.length; i++)
            Card.internalBinaryWrite(message.evidenceDeck[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 current_step = 3; */
        if (message.currentStep !== 0)
            writer.tag(3, WireType.Varint).int32(message.currentStep);
        /* repeated beautifulmind.JourneyStep journey_log = 4; */
        for (let i = 0; i < message.journeyLog.length; i++)
            JourneyStep.internalBinaryWrite(message.journeyLog[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bool is_evidence_revealed = 5; */
        if (message.isEvidenceRevealed !== false)
            writer.tag(5, WireType.Varint).bool(message.isEvidenceRevealed);
        /* beautifulmind.Card current_card = 6; */
        if (message.currentCard)
            Card.internalBinaryWrite(message.currentCard, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* map<string, beautifulmind.Concept> concepts = 7; */
        for (let k of globalThis.Object.keys(message.concepts)) {
            writer.tag(7, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Concept.internalBinaryWrite(message.concepts[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message beautifulmind.SessionState
 */
export const SessionState = new SessionState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListThesesResponse$Type extends MessageType {
    constructor() {
        super("beautifulmind.ListThesesResponse", [
            { no: 1, name: "theses", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Card }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.theses = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated beautifulmind.Card theses */ 1:
                    message.theses.push(Card.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated beautifulmind.Card theses = 1; */
        for (let i = 0; i < message.theses.length; i++)
            Card.internalBinaryWrite(message.theses[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message beautifulmind.ListThesesResponse
 */
export const ListThesesResponse = new ListThesesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartSessionRequest$Type extends MessageType {
    constructor() {
        super("beautifulmind.StartSessionRequest", [
            { no: 1, name: "thesis_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.thesisId = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string thesis_id */ 1:
                    message.thesisId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string thesis_id = 1; */
        if (message.thesisId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.thesisId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message beautifulmind.StartSessionRequest
 */
export const StartSessionRequest = new StartSessionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProcessInputRequest$Type extends MessageType {
    constructor() {
        super("beautifulmind.ProcessInputRequest", [
            { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.key = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.key = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string key = 1; */
        if (message.key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message beautifulmind.ProcessInputRequest
 */
export const ProcessInputRequest = new ProcessInputRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddCardRequest$Type extends MessageType {
    constructor() {
        super("beautifulmind.AddCardRequest", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "concept_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.title = "";
        message.content = "";
        message.conceptId = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                case /* string concept_id */ 3:
                    message.conceptId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        /* string concept_id = 3; */
        if (message.conceptId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.conceptId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message beautifulmind.AddCardRequest
 */
export const AddCardRequest = new AddCardRequest$Type();
/**
 * @generated ServiceType for protobuf service beautifulmind.BeautifulMind
 */
export const BeautifulMind = new ServiceType("beautifulmind.BeautifulMind", [
    { name: "ListTheses", options: {}, I: Empty, O: ListThesesResponse },
    { name: "StartSession", options: {}, I: StartSessionRequest, O: SessionState },
    { name: "ProcessInput", options: {}, I: ProcessInputRequest, O: SessionState },
    { name: "AddCard", options: {}, I: AddCardRequest, O: Card }
]);
